import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n;
	static int m;
	static int[][] map;
	static boolean[] v;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		n = sc.nextInt();
		m = sc.nextInt();
		int start = sc.nextInt();
		map = new int[n+1][n+1];
		v = new boolean[n+1];
		int a,b;
		for(int i = 0; i < m; i++) {
			a = sc.nextInt();
			b = sc.nextInt();
			map[a][b] = 1;
			map[b][a] = 1;
		}
		dfs(start);
		v = new boolean[n+1];
		System.out.println();
		bfs(start);
		
	}
	
	static void dfs(int start) {
		if(v[start]) {
			return;
		}
		v[start] = true;
		System.out.print(start + " ");
		
		for(int i = 1; i < map.length; i++) {
			if(map[start][i]==1) {
				dfs(i);
			}
		}
	}
	
	static void bfs(int start) {
		Queue<Integer> q = new LinkedList<>();
		
		v[start] = true;
		q.offer(start);
		while(!q.isEmpty()) {
			start = q.poll();

			v[start] = true;
			System.out.print(start+ " ");
			
			for(int i = 1; i < map.length; i++) {
				if(map[start][i]==0) {
					continue;
				}
				if(v[i]) {
					continue;
				}
				v[i] = true;
				q.offer(i);
			}			
		}
	}
	
}
